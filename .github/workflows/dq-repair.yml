name: dq-repair

on:
  schedule:
    - cron: "15 0 * * *" # 00:15 UTC → INTRADAY
    - cron: "15 12 * * *" # 12:15 UTC → INTRADAY
    - cron: "20 3 * * *" # 03:20 UTC → NIGHTLY (daily+aggregates)
  workflow_dispatch:
    inputs:
      mode:
        description: "Select run mode"
        type: choice
        required: false
        default: intraday
        options: [intraday, nightly]

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - run: |
          python -m pip install --upgrade pip
          pip install "cassandra-driver==3.29.0" requests python-dotenv tzdata

      - run: echo "PYTHONPATH=." >> "$GITHUB_ENV"

      # ───────────────── Astra: secure bundle ─────────────────
      - name: Rehydrate secure-connect.zip
        shell: bash
        env:
          SECURE_CONNECT_ZIP_B64: ${{ secrets.ASTRA_BUNDLE_BASE64 }}
        run: |
          set -euo pipefail
          base64 --decode --ignore-garbage <<< "$SECURE_CONNECT_ZIP_B64" > secure-connect.zip
          echo "ASTRA_BUNDLE_PATH=$PWD/secure-connect.zip" >> "$GITHUB_ENV"
          echo "ASTRA_SECURE_BUNDLE=$PWD/secure-connect.zip" >> "$GITHUB_ENV"

      # ───────────────── Astra: token (supports plaintext or base64) ─────────────────
      - name: Export Astra token
        shell: bash
        env:
          ASTRA_TOKEN_PLAINTEXT: ${{ secrets.ASTRA_TOKEN }}
          ASTRA_TOKEN_B64: ${{ secrets.ASTRA_TOKEN_B64 }}
        run: |
          set -euo pipefail
          if [ -n "${ASTRA_TOKEN_PLAINTEXT}" ]; then
            echo "ASTRA_TOKEN=${ASTRA_TOKEN_PLAINTEXT}" >> "$GITHUB_ENV"
            echo "Using plaintext ASTRA_TOKEN secret"
          elif [ -n "${ASTRA_TOKEN_B64}" ]; then
            TOK=$(echo "${ASTRA_TOKEN_B64}" | base64 -d)
            echo "ASTRA_TOKEN=${TOK}" >> "$GITHUB_ENV"
            echo "Decoded ASTRA_TOKEN from ASTRA_TOKEN_B64"
          else
            echo "ERROR: Neither ASTRA_TOKEN nor ASTRA_TOKEN_B64 is set as a secret." >&2
            exit 1
          fi

      - name: Compute DQ_MODE from current UTC time
        id: when
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.mode }}" ]; then
            M="${{ github.event.inputs.mode }}"; M=${M^^}   # to upper
            echo "DQ_MODE=$M" >> "$GITHUB_ENV"
            echo "mode set from input: $M"
            exit 0
          fi
          HOUR=$(date -u +%H)
          if [ "$HOUR" = "03" ]; then
            echo "DQ_MODE=NIGHTLY" >> "$GITHUB_ENV"
          else
            echo "DQ_MODE=INTRADAY" >> "$GITHUB_ENV"
          fi
          echo "UTC_HOUR=$HOUR"

      # ─────────── Availability (INTRADAY: intraday bits only) ───────────
      - name: Update intraday coverage (10m/hourly)
        if: env.DQ_MODE == 'INTRADAY'
        env:
          ASTRA_KEYSPACE: ${{ secrets.ASTRA_KEYSPACE }}
          # ASTRA_TOKEN and bundle vars come from $GITHUB_ENV above
          REQUEST_TIMEOUT_SEC: "30"
          LOG_HEARTBEAT_SEC: "20"
          AVAIL_RUN_DAILY: "0"
          AVAIL_RUN_INTRADAY: "1"
          IDS_SOURCE: "live"
        run: |
          python prices/FF_gck_coin_data_availability.py

      # ─────────── Availability (NIGHTLY: daily-only) ───────────
      - name: Update daily coverage (ranges + summary)
        if: env.DQ_MODE == 'NIGHTLY'
        env:
          ASTRA_KEYSPACE: ${{ secrets.ASTRA_KEYSPACE }}
          # ASTRA_TOKEN and bundle vars come from $GITHUB_ENV above
          REQUEST_TIMEOUT_SEC: "30"
          LOG_HEARTBEAT_SEC: "20"
          AVAIL_RUN_DAILY: "1"
          AVAIL_RUN_INTRADAY: "0"
          IDS_SOURCE: "daily"
        run: |
          python prices/FF_gck_coin_data_availability.py

      # -- wait 60 seconds
      - name: Wait for coverage writes to become visible
        run: sleep 60

      # ─────────── INTRADAY pass (10m/hourly only) ───────────
      - name: Intraday repair (10m/hourly only)
        if: env.DQ_MODE == 'INTRADAY'
        env:
          ASTRA_TOKEN: ${{ env.ASTRA_TOKEN }}
          ASTRA_KEYSPACE: ${{ secrets.ASTRA_KEYSPACE }}
          ASTRA_BUNDLE_PATH: ${{ env.ASTRA_BUNDLE_PATH }}
          ASTRA_SECURE_BUNDLE: ${{ env.ASTRA_SECURE_BUNDLE }}

          # Windows
          DQ_MODE: "INTRADAY"
          DQ_WINDOW_10M_DAYS: "7"
          DQ_WINDOW_HOURLY_DAYS: "30"
          DQ_WINDOW_DAILY_DAYS: "1" # irrelevant here

          # Intraday focus
          FILL_HOURLY: "1"
          FILL_HOURLY_FROM_API: "1"
          INTERPOLATE_IF_API_MISS: "1"

          # Daily work OFF in this pass
          FIX_DAILY_FROM_10M: "0"
          BACKFILL_DAILY_FROM_API: "0"
          SEED_10M_FROM_DAILY: "0"

          # Aggregates: only intraday
          FULL_MODE: "0"
          RECOMPUTE_MCAP_10M: "1"
          RECOMPUTE_MCAP_HOURLY: "1"
          RECOMPUTE_MCAP_DAILY: "0"

          # CoinGecko
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
          COINGECKO_API_TIER: ${{ secrets.COINGECKO_API_TIER || 'demo' }}
        run: |
          python prices/GG_gck_dq_repair_timeseries.py

      # ─────────── NIGHTLY pass (daily + aggregates) ───────────
      - name: Nightly repair (daily focus + aggregates)
        if: env.DQ_MODE == 'NIGHTLY'
        env:
          ASTRA_TOKEN: ${{ env.ASTRA_TOKEN }}
          ASTRA_KEYSPACE: ${{ secrets.ASTRA_KEYSPACE }}
          ASTRA_BUNDLE_PATH: ${{ env.ASTRA_BUNDLE_PATH }}
          ASTRA_SECURE_BUNDLE: ${{ env.ASTRA_SECURE_BUNDLE }}

          # Nightly window → yesterday only
          DQ_MODE: "NIGHTLY"
          DQ_WINDOW_DAILY_DAYS: "1"
          DQ_WINDOW_10M_DAYS: "7"
          DQ_WINDOW_HOURLY_DAYS: "30"

          # Daily work ON
          FIX_DAILY_FROM_10M: "1"
          BACKFILL_DAILY_FROM_API: "1"
          DAILY_API_REQ_BUDGET: "150"
          SEED_10M_FROM_DAILY: "0" # keep off unless you really want synthetic 10m

          # Hourly optional at night
          FILL_HOURLY: "0"

          # Aggregates (daily + optionally intraday if you want)
          FULL_MODE: "1"
          TRUNCATE_AGGREGATES_IN_FULL: "1"
          RECOMPUTE_MCAP_DAILY: "1"
          RECOMPUTE_MCAP_HOURLY: "0"
          RECOMPUTE_MCAP_10M: "0"

          # CoinGecko
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
          COINGECKO_API_TIER: ${{ secrets.COINGECKO_API_TIER || 'demo' }}
        run: |
          python prices/GG_gck_dq_repair_timeseries.py
