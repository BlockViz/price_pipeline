name: gecko-prices-realtime

on:
  workflow_dispatch:
    inputs:
      run_01:
        description: "AA_gck_load_prices_live.py (5-in-1)"
        required: false
        default: "true"
      run_02:
        description: "CC_gck_append_10m_from_live.py"
        required: false
        default: "true"
      TOP_N:
        description: "Override TOP_N"
        required: false
        default: ""
      RANK_TOP_N:
        description: "Override RANK_TOP_N"
        required: false
        default: ""
      VERBOSE_MODE:
        description: "Verbose (0/1)"
        required: false
        default: "0"
  schedule:
    - cron: "*/10 * * * *" # backup: every 10 minutes UTC

permissions:
  contents: read

concurrency:
  group: gecko_prices-realtime-${{ github.ref }}
  cancel-in-progress: true

jobs:
  recent_check:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.decide.outputs.should_run }}
    steps:
      - id: decide
        uses: actions/github-script@v7
        with:
          script: |
            // If not a schedule event, always run (CFlare/manual dispatch)
            if (context.eventName !== 'schedule') {
              core.setOutput('should_run', 'true');
              core.info('non-schedule event -> run');
              return;
            }
            // For schedule: skip if a non-schedule run started recently
            const windowMinutes = 7; // adjust as you like
            const sinceISO = new Date(Date.now() - windowMinutes * 60 * 1000).toISOString();
            const branch = context.ref.replace('refs/heads/', '');

            const { data } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 25,
              branch
            });

            const recent = data.workflow_runs.find(r =>
              r.name === context.workflow &&
              r.event !== 'schedule' &&
              new Date(r.run_started_at).toISOString() >= sinceISO
            );

            core.setOutput('should_run', recent ? 'false' : 'true');
            core.info(`schedule event -> recent non-schedule since ${sinceISO}: ${recent ? 'YES (skip)' : 'NO (run)'}`);

  run:
    needs: [recent_check]
    if: needs.recent_check.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      TZ: UTC
      PYTHONUNBUFFERED: "1"
      PYTHONUTF8: "1"
      PYTHONWARNINGS: default

      # Normalize so schedule behaves like dispatch
      RUN_01: ${{ (github.event_name == 'schedule' && 'true') || (github.event.inputs.run_01 || 'true') }}
      RUN_02: ${{ (github.event_name == 'schedule' && 'true') || (github.event.inputs.run_02 || 'true') }}

      TOP_N_RESOLVED: ${{ (github.event.inputs.TOP_N != '' && github.event.inputs.TOP_N) || secrets.TOP_N || '200' }}
      RANK_TOP_N_RESOLVED: ${{ (github.event.inputs.RANK_TOP_N != '' && github.event.inputs.RANK_TOP_N) || secrets.TOP_N || '200' }}
      VERBOSE_RESOLVED: ${{ github.event.inputs.VERBOSE_MODE || '0' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Export PYTHONPATH (repo root)
        run: echo "PYTHONPATH=." >> "$GITHUB_ENV"

      - name: Astra bundle
        run: |
          echo "${{ secrets.ASTRA_BUNDLE_BASE64 }}" | base64 -d > secure-connect.zip
          test -s secure-connect.zip

      - name: 01 Load ALL live tables (5-in-1)
        if: env.RUN_01 == 'true'
        timeout-minutes: 10
        env:
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
          COINGECKO_API_TIER: ${{ secrets.COINGECKO_API_TIER }}
          ASTRA_BUNDLE_PATH: secure-connect.zip
          ASTRA_TOKEN: ${{ secrets.ASTRA_TOKEN }}
          ASTRA_KEYSPACE: ${{ secrets.ASTRA_KEYSPACE }}

          TOP_N: "${{ env.TOP_N_RESOLVED }}"
          RANK_TOP_N: "${{ env.RANK_TOP_N_RESOLVED }}"

          STALE_WARN_MINUTES: "10"
          REQUIRED_LIVE_MIN: "140"

          RETRIES: "3"
          BACKOFF_MIN: "5"
          MAX_BACKOFF_MIN: "30"
          REQUEST_TIMEOUT_SEC: "60"
          CONNECT_TIMEOUT_SEC: "15"
          BATCH_FLUSH_EVERY: "40"

          RANK_BUCKET: "all"
          GECKO_MCAP_BUCKET: "categories"

          VERBOSE_MODE: "${{ env.VERBOSE_RESOLVED }}"
        run: python prices/AA_gck_load_prices_live.py

      - name: 02 Append 10m from live_rolling
        if: env.RUN_02 == 'true'
        timeout-minutes: 7
        env:
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
          COINGECKO_API_TIER: ${{ secrets.COINGECKO_API_TIER }}
          ASTRA_BUNDLE_PATH: secure-connect.zip
          ASTRA_TOKEN: ${{ secrets.ASTRA_TOKEN }}
          ASTRA_KEYSPACE: ${{ secrets.ASTRA_KEYSPACE }}

          TOP_N: "${{ env.TOP_N_RESOLVED }}"
          REQUEST_TIMEOUT_SEC: "60"
          CONNECT_TIMEOUT_SEC: "15"
          FETCH_SIZE: "500"
          SLOT_DELAY_SEC: "120"
          SLOTS_BACKFILL: "2"
          VERBOSE_MODE: "${{ env.VERBOSE_RESOLVED }}"
        run: python prices/CC_gck_append_10m_from_live.py
